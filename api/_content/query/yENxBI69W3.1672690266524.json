[{"_path":"/core/Results","_dir":"core","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Results","description":"Add, log, retrieve, and share the results of plugin tests.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"results"},"children":[{"type":"text","value":"Results"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add, log, retrieve, and share the results of plugin tests."}]},{"type":"element","tag":"h2","props":{"id":"synopsis"},"children":[{"type":"text","value":"Synopsis"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Moved to "},{"type":"element","tag":"a","props":{"href":"https://github.com/haraka/haraka-results","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/haraka/haraka-results"}]}]}]},"_type":"markdown","_id":"content:6.core:14.Results.md","_source":"content","_file":"6.core/14.Results.md","_extension":"md"},{"_path":"/tutorials/migrating_from_v1_to_v2","_dir":"tutorials","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Migrating from Haraka v1.x to v2.x","description":"Haraka v2.x contains two significant changes to the v1.x API related to\nstreams.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"migrating-from-haraka-v1x-to-v2x"},"children":[{"type":"text","value":"Migrating from Haraka v1.x to v2.x"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Haraka v2.x contains two significant changes to the v1.x API related to\nstreams."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Streams are an abstraction over a data flow that is provided by Node core\nand is used throughout node to \"pipe\" data between two places or more. This\nmakes programming very easy, and is hence why we started using them in Haraka\nstarting with version 2.0.0."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For more information about the Stream API, see\n"},{"type":"element","tag":"a","props":{"href":"http://nodejs.org/api/stream.html","rel":["nofollow"]},"children":[{"type":"text","value":"http://nodejs.org/api/stream.html"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It's important to note that if you are using standard Haraka plugins then\nit's very unlikely you will need to change anything. Though you may want\nto configure "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"spool_dir"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"spool_after"}]},{"type":"text","value":" in "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"config/smtp.ini"}]},{"type":"text","value":". However if\nyou have written custom plugins, continue reading."}]},{"type":"element","tag":"h2","props":{"id":"changes-to-look-for"},"children":[{"type":"text","value":"Changes To Look For"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Firstly, the incoming data in an email (the email body) is now stored in an\nobject which you can treat as a ReadableStream. To find if this is relevant\nfor you, look for instances of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"data_lines"}]},{"type":"text","value":" in your plugins."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Secondly, if you parse the mail body, attachments are now provided as a\nstream, rather than custom start/data/end events. To find if this is relevant\nfor you, look for instances of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"attachment_hooks"}]},{"type":"text","value":" in your plugins."}]},{"type":"element","tag":"h2","props":{"id":"fixing-data_lines-plugins"},"children":[{"type":"text","value":"Fixing data_lines plugins"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Any plugins now working on each line of data will need to change to using a\nstream. The stream is called "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"transaction.message_stream"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"These changes may be complicated if you are iterating over each line and\ndoing something with the strings therein. However if you are piping the data\nto an application or over a network, your code will become significantly\nsimpler (and a lot faster)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In v1.x Haraka populated the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"transaction.data_lines"}]},{"type":"text","value":" array for each line of\ndata received.  If you were writing the data to a socket then you had to handle backpressure manually by checking the return of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"write()"}]},{"type":"text","value":" and adding\n"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"on('drain')"}]},{"type":"text","value":" handlers like so:"}]},{"type":"element","tag":"code","props":{"code":"var data_marker = 0;\nvar in_data = false;\nvar end_pending = true;\nvar send_data = function () {\n    in_data = true;\n    var wrote_all = true;\n    while (wrote_all && (data_marker < connection.transaction.data_lines.length)) {\n        var line = connection.transaction.data_lines[data_marker];\n        data_marker++;\n        wrote_all = socket.write(Buffer.from(line.replace(/^\\./, '..').replace(/\\r?\\n/g, '\\r\\n')), 'binary');\n        if (!wrote_all) return;\n    }\n    // we get here if wrote_all still true, and we got to end of data_lines\n    if (end_pending) {\n        end_pending = false;\n        // Finished...\n        socket.send_command('dot');\n    }\n};\nsocket.on('drain', function () {\n    if (end_pending && in_data) {\n        setImmediate(function () { send_data() });\n    }\n});\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var data_marker = 0;\nvar in_data = false;\nvar end_pending = true;\nvar send_data = function () {\n    in_data = true;\n    var wrote_all = true;\n    while (wrote_all && (data_marker < connection.transaction.data_lines.length)) {\n        var line = connection.transaction.data_lines[data_marker];\n        data_marker++;\n        wrote_all = socket.write(Buffer.from(line.replace(/^\\./, '..').replace(/\\r?\\n/g, '\\r\\n')), 'binary');\n        if (!wrote_all) return;\n    }\n    // we get here if wrote_all still true, and we got to end of data_lines\n    if (end_pending) {\n        end_pending = false;\n        // Finished...\n        socket.send_command('dot');\n    }\n};\nsocket.on('drain', function () {\n    if (end_pending && in_data) {\n        setImmediate(function () { send_data() });\n    }\n});\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In v2.x this now becomes:"}]},{"type":"element","tag":"code","props":{"code":"connection.transaction.message_stream.pipe(socket, {dot_stuffing: true, ending_dot: true});\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"connection.transaction.message_stream.pipe(socket, {dot_stuffing: true, ending_dot: true});\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This automatically chunks the data, handles backpressure and will apply any\nnecessary format changes.  See "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docs/Transaction.md"}]},{"type":"text","value":" for the full details."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you need to handle the input data by line, then you will need to create\nyour own writable stream and then pipe the message to the stream and then\nextract the lines from the stream of data.  See "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"plugins/dkim_sign.js"}]},{"type":"text","value":" for\nan example."}]},{"type":"element","tag":"h2","props":{"id":"fixing-attachment_hooks-plugins"},"children":[{"type":"text","value":"Fixing attachment_hooks plugins"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For v1.x you passed in functions to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"transaction.attachment_hooks()"}]},{"type":"text","value":" as\nfollows:"}]},{"type":"element","tag":"code","props":{"code":"transaction.attachment_hooks(\n    function (ctype, filename, body) {...}, // start\n    function (buf) {...}, // data\n    function () {...} // end\n);\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"transaction.attachment_hooks(\n    function (ctype, filename, body) {...}, // start\n    function (buf) {...}, // data\n    function () {...} // end\n);\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That has now changed to:"}]},{"type":"element","tag":"code","props":{"code":"transaction.attachment_hooks(\n    function (ctype, filename, body, stream) {...}, // start\n);\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"transaction.attachment_hooks(\n    function (ctype, filename, body, stream) {...}, // start\n);\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This allows you to attach the stream to other streams via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"stream.pipe(dest)"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Sometimes destination streams will apply backpressure on the sending stream,\nfor example if you are sending attachments to a remote service. In order\nfor this backpressure to apply to the connection itself (so that we don't\nhave to buffer up data in memory), we need to provide the connection object\nto the stream:"}]},{"type":"element","tag":"code","props":{"code":"var transaction = connection.transaction;\ntransaction.attachment_hooks(\n    function (ctype, filename, body, stream) {\n        stream.connection = connection;\n        ...\n    }\n);\n","language":"js"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"var transaction = connection.transaction;\ntransaction.attachment_hooks(\n    function (ctype, filename, body, stream) {\n        stream.connection = connection;\n        ...\n    }\n);\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For a full example of using attachment streams, see the Transaction.md\ndocumentation file."}]}]},"navigation":{"title":"Migrating from v1 to v2"},"_type":"markdown","_id":"content:7.tutorials:Migrating_from_v1_to_v2.md","_source":"content","_file":"7.tutorials/Migrating_from_v1_to_v2.md","_extension":"md"}]